/*
 * Intrinio API
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.intrinio.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intrinio.models.CompanySummary;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;

/**
 * Fundamental
 */

public class Fundamental {
  @SerializedName("id")
  private String id = null;

  @SerializedName("company")
  private CompanySummary company = null;

  @SerializedName("statement_code")
  private String statementCode = null;

  @SerializedName("fiscal_year")
  private BigDecimal fiscalYear = null;

  @SerializedName("fiscal_period")
  private String fiscalPeriod = null;

  /**
   * The type of Fundamental
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REPORTED("reported"),
    
    RESTATED("restated"),
    
    CALCULATED("calculated");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("start_date")
  private LocalDate startDate = null;

  @SerializedName("end_date")
  private LocalDate endDate = null;

  @SerializedName("filing_date")
  private LocalDate filingDate = null;

  @SerializedName("calculated")
  private Boolean calculated = null;

  public Fundamental id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The Intrinio ID of the Fundamental
   * @return id
  **/
  @ApiModelProperty(value = "The Intrinio ID of the Fundamental")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Fundamental company(CompanySummary company) {
    this.company = company;
    return this;
  }

   /**
   * The Company that the Fundamental was belongs to
   * @return company
  **/
  @ApiModelProperty(value = "The Company that the Fundamental was belongs to")
  public CompanySummary getCompany() {
    return company;
  }

  public void setCompany(CompanySummary company) {
    this.company = company;
  }

  public Fundamental statementCode(String statementCode) {
    this.statementCode = statementCode;
    return this;
  }

   /**
   * The code of the financial statement that the Fundamental represents
   * @return statementCode
  **/
  @ApiModelProperty(value = "The code of the financial statement that the Fundamental represents")
  public String getStatementCode() {
    return statementCode;
  }

  public void setStatementCode(String statementCode) {
    this.statementCode = statementCode;
  }

  public Fundamental fiscalYear(BigDecimal fiscalYear) {
    this.fiscalYear = fiscalYear;
    return this;
  }

   /**
   * The fiscal year
   * @return fiscalYear
  **/
  @ApiModelProperty(value = "The fiscal year")
  public BigDecimal getFiscalYear() {
    return fiscalYear;
  }

  public void setFiscalYear(BigDecimal fiscalYear) {
    this.fiscalYear = fiscalYear;
  }

  public Fundamental fiscalPeriod(String fiscalPeriod) {
    this.fiscalPeriod = fiscalPeriod;
    return this;
  }

   /**
   * The fiscal period
   * @return fiscalPeriod
  **/
  @ApiModelProperty(value = "The fiscal period")
  public String getFiscalPeriod() {
    return fiscalPeriod;
  }

  public void setFiscalPeriod(String fiscalPeriod) {
    this.fiscalPeriod = fiscalPeriod;
  }

  public Fundamental type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of Fundamental
   * @return type
  **/
  @ApiModelProperty(value = "The type of Fundamental")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Fundamental startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * The period start date
   * @return startDate
  **/
  @ApiModelProperty(value = "The period start date")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public Fundamental endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * The period start date
   * @return endDate
  **/
  @ApiModelProperty(value = "The period start date")
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }

  public Fundamental filingDate(LocalDate filingDate) {
    this.filingDate = filingDate;
    return this;
  }

   /**
   * The date and time when the Fundamental was filed with the SEC
   * @return filingDate
  **/
  @ApiModelProperty(value = "The date and time when the Fundamental was filed with the SEC")
  public LocalDate getFilingDate() {
    return filingDate;
  }

  public void setFilingDate(LocalDate filingDate) {
    this.filingDate = filingDate;
  }

  public Fundamental calculated(Boolean calculated) {
    this.calculated = calculated;
    return this;
  }

   /**
   * If true, this Fundamental was calculated by Intrinio and not actually reported by the Company
   * @return calculated
  **/
  @ApiModelProperty(value = "If true, this Fundamental was calculated by Intrinio and not actually reported by the Company")
  public Boolean isisCalculated() {
    return calculated;
  }

  public void setCalculated(Boolean calculated) {
    this.calculated = calculated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fundamental fundamental = (Fundamental) o;
    return Objects.equals(this.id, fundamental.id) &&
        Objects.equals(this.company, fundamental.company) &&
        Objects.equals(this.statementCode, fundamental.statementCode) &&
        Objects.equals(this.fiscalYear, fundamental.fiscalYear) &&
        Objects.equals(this.fiscalPeriod, fundamental.fiscalPeriod) &&
        Objects.equals(this.type, fundamental.type) &&
        Objects.equals(this.startDate, fundamental.startDate) &&
        Objects.equals(this.endDate, fundamental.endDate) &&
        Objects.equals(this.filingDate, fundamental.filingDate) &&
        Objects.equals(this.calculated, fundamental.calculated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, company, statementCode, fiscalYear, fiscalPeriod, type, startDate, endDate, filingDate, calculated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fundamental {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    statementCode: ").append(toIndentedString(statementCode)).append("\n");
    sb.append("    fiscalYear: ").append(toIndentedString(fiscalYear)).append("\n");
    sb.append("    fiscalPeriod: ").append(toIndentedString(fiscalPeriod)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    filingDate: ").append(toIndentedString(filingDate)).append("\n");
    sb.append("    calculated: ").append(toIndentedString(calculated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

