/*
 * Intrinio API
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.intrinio.api;

import com.intrinio.invoker.ApiException;
import java.math.BigDecimal;
import com.intrinio.models.Company;
import com.intrinio.models.CompanyNews;
import com.intrinio.models.CompanySummary;
import com.intrinio.models.FilingSummary;
import com.intrinio.models.Fundamental;
import com.intrinio.models.HistoricalData;
import org.threeten.bp.LocalDate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompanyApi
 */
@Ignore
public class CompanyApiTest {

    private final CompanyApi api = new CompanyApi();

    
    /**
     * Filter Companies
     *
     * Returns Companies matching the specified filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterCompaniesTest() throws ApiException {
        LocalDate lastFilingDate = null;
        String sic = null;
        String template = null;
        String sector = null;
        String industryCategory = null;
        String industryGroup = null;
        String nextPage = null;
        List<CompanySummary> response = api.filterCompanies(lastFilingDate, sic, template, sector, industryCategory, industryGroup, nextPage);

        // TODO: test validations
    }
    
    /**
     * Filter Fundamentals for a Company
     *
     * Returns Fundamentals for the Company with the given &#x60;identifier&#x60; and matching the specified filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterCompanyFundamentalsTest() throws ApiException {
        String identifier = null;
        LocalDate filedAfter = null;
        LocalDate filedBefore = null;
        Boolean reportedOnly = null;
        Integer fiscalYear = null;
        String statementCode = null;
        String type = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String nextPage = null;
        List<Fundamental> response = api.filterCompanyFundamentals(identifier, filedAfter, filedBefore, reportedOnly, fiscalYear, statementCode, type, startDate, endDate, nextPage);

        // TODO: test validations
    }
    
    /**
     * Get All Companies
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCompaniesTest() throws ApiException {
        String nextPage = null;
        List<CompanySummary> response = api.getAllCompanies(nextPage);

        // TODO: test validations
    }
    
    /**
     * Filings
     *
     * Returns a complete list of SEC filings for the Company with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCompanyFilingsTest() throws ApiException {
        String identifier = null;
        String nextPage = null;
        List<FilingSummary> response = api.getAllCompanyFilings(identifier, nextPage);

        // TODO: test validations
    }
    
    /**
     * Get All Fundamentals for a Company
     *
     * Returns all Fundamentals for the Company with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCompanyFundamentalsTest() throws ApiException {
        String identifier = null;
        String nextPage = null;
        List<Fundamental> response = api.getAllCompanyFundamentals(identifier, nextPage);

        // TODO: test validations
    }
    
    /**
     * Get a Company by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyTest() throws ApiException {
        String identifier = null;
        Company response = api.getCompany(identifier);

        // TODO: test validations
    }
    
    /**
     * Get Company Data Point (Number)
     *
     * Returns a numeric value for the given &#x60;item&#x60; for the Company with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyDataPointNumberTest() throws ApiException {
        String identifier = null;
        String item = null;
        BigDecimal response = api.getCompanyDataPointNumber(identifier, item);

        // TODO: test validations
    }
    
    /**
     * Get Company Data Point (Text)
     *
     * Returns a text value for the given &#x60;item&#x60; for the Company with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyDataPointTextTest() throws ApiException {
        String identifier = null;
        String item = null;
        String response = api.getCompanyDataPointText(identifier, item);

        // TODO: test validations
    }
    
    /**
     * Get Company Historical Data
     *
     * Returns historical values for the given &#x60;item&#x60; and the Company with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanyHistoricalDataTest() throws ApiException {
        String identifier = null;
        String item = null;
        String type = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String sortOrder = null;
        String nextPage = null;
        List<HistoricalData> response = api.getCompanyHistoricalData(identifier, item, type, startDate, endDate, sortOrder, nextPage);

        // TODO: test validations
    }
    
    /**
     * News
     *
     * Returns news for the Company with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNewsTest() throws ApiException {
        String identifier = null;
        String nextPage = null;
        List<CompanyNews> response = api.getNews(identifier, nextPage);

        // TODO: test validations
    }
    
    /**
     * Lookup a Fundamental for a Company
     *
     * Returns the Fundamental for the Company with the given &#x60;identifier&#x60; and with the given parameters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookupCompanyFundamentalTest() throws ApiException {
        String identifier = null;
        String statementCode = null;
        String fiscalPeriod = null;
        Integer fiscalYear = null;
        List<Fundamental> response = api.lookupCompanyFundamental(identifier, statementCode, fiscalPeriod, fiscalYear);

        // TODO: test validations
    }
    
    /**
     * Search Companies
     *
     * Searches for Companies matching the text &#x60;query&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCompaniesTest() throws ApiException {
        String query = null;
        String nextPage = null;
        List<CompanySummary> response = api.searchCompanies(query, nextPage);

        // TODO: test validations
    }
    
}
