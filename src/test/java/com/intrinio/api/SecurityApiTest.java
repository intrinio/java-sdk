/*
 * Intrinio API
 * Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.intrinio.api;

import com.intrinio.invoker.ApiException;
import java.math.BigDecimal;
import com.intrinio.models.HistoricalData;
import org.threeten.bp.LocalDate;
import com.intrinio.models.Security;
import com.intrinio.models.SecurityScreenGroup;
import com.intrinio.models.SecurityScreenResult;
import com.intrinio.models.SecuritySummary;
import com.intrinio.models.StockPriceSummary;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityApi
 */
@Ignore
public class SecurityApiTest {

    private final SecurityApi api = new SecurityApi();

    
    /**
     * Get All Securiites
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSecuritiesTest() throws ApiException {
        String nextPage = null;
        List<SecuritySummary> response = api.getAllSecurities(nextPage);

        // TODO: test validations
    }
    
    /**
     * Get a Security by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityByIdTest() throws ApiException {
        String identifier = null;
        Security response = api.getSecurityById(identifier);

        // TODO: test validations
    }
    
    /**
     * Get Security Data Point (Number)
     *
     * Returns a numeric value for the given &#x60;item&#x60; for the Security with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityDataPointNumberTest() throws ApiException {
        String identifier = null;
        String item = null;
        BigDecimal response = api.getSecurityDataPointNumber(identifier, item);

        // TODO: test validations
    }
    
    /**
     * Get Security Data Point (Text)
     *
     * Returns a text value for the given &#x60;item&#x60; for the Security with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityDataPointTextTest() throws ApiException {
        String identifier = null;
        String item = null;
        String response = api.getSecurityDataPointText(identifier, item);

        // TODO: test validations
    }
    
    /**
     * Get Security Historical Data
     *
     * Returns historical values for the given &#x60;item&#x60; and the Security with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityHistoricalDataTest() throws ApiException {
        String identifier = null;
        String item = null;
        String type = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String sortOrder = null;
        String nextPage = null;
        List<HistoricalData> response = api.getSecurityHistoricalData(identifier, item, type, startDate, endDate, sortOrder, nextPage);

        // TODO: test validations
    }
    
    /**
     * Get Stock Prices for Security
     *
     * Return stock prices for the Security with the given &#x60;identifier&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityStockPricesTest() throws ApiException {
        String identifier = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String frequency = null;
        String nextPage = null;
        List<StockPriceSummary> response = api.getSecurityStockPrices(identifier, startDate, endDate, frequency, nextPage);

        // TODO: test validations
    }
    
    /**
     * Screen Securities
     *
     * Screen securities using complex logic
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void screenSecuritiesTest() throws ApiException {
        SecurityScreenGroup logic = null;
        String orderColumn = null;
        String orderDirection = null;
        Boolean primaryOnly = null;
        String nextPage = null;
        List<SecurityScreenResult> response = api.screenSecurities(logic, orderColumn, orderDirection, primaryOnly, nextPage);

        // TODO: test validations
    }
    
    /**
     * Search Securities
     *
     * Searches for Securities matching the text &#x60;query&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSecuritiesTest() throws ApiException {
        String query = null;
        String nextPage = null;
        List<SecuritySummary> response = api.searchSecurities(query, nextPage);

        // TODO: test validations
    }
    
}
